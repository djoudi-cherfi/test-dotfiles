#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Clone a repository and install its dependencies.

clone() {

    git clone "$1" \
        || return

    cd "$(basename "${1%.*}")" \
        || return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if there are dependencies to be installed.

    if [ ! -f "package.json" ]; then
        return
    fi

    # Check if the project uses Yarn.

    if [ -f "yarn.lock" ] && command -v "yarn" $> /dev/null; then
        printf "\n"
        yarn install
        return
    fi

    # If not, assume it uses npm.

    if command -v "npm" $> /dev/null; then
        printf "\n"
        npm install
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git() {

    if [[ $@ == "push origin master" ]]; then
        printf "Please don't push Origin Master."
    else
        command git "$@"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git_home(){

    git rev-parse --show-toplevel
 
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git_ignore(){ 

    repo_home=$(git rev-parse --show-toplevel); \
        for filename in ${@}; do
            printf $filename >> $repo_home/.gitignore;
        done

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Start an server, optionally specifying the directory, address, port
# and server type (py, ph and js)

server() {

    # Set default values
    directory="./"
    port=8000
    address="localhost"
    server_type="py"  # Default to Python http.server

    help_option="
    Usage: server [-d directory] [-p port] [-a address] [-t server_type] [-h]

    Starts a server in the specified directory with optional port,
    address, and server type.\n\n

    Options:
    -d   Directory path (default: ./)
    -p   Port number (default: 8000)
    -a   Address (default: localhost) or IP 127.0.0.1
    -t   Server type: py (Python http.server), ph (PHP), js (Node.js http-server)
    -h   Display this help message

    Example:
    server -d "~/src/index.html" -p "3000" -a "localhost" -t "js"
    "

    # Parse command line options
    while getopts ":d:p:a:t:h" opt; do
        case $opt in
            d)
                directory="$OPTARG"
                ;;
            p)
                port="$OPTARG"
                ;;
            a)
                address="$OPTARG"
                ;;
            t)
                server_type="$OPTARG"
                ;;
            h)
                printf "%s\n" "$help_option"
                exit 0
                ;;
            \?)
                printf "Invalid option: -%s\n" "$OPTARG" >&2
                exit 1
                ;;
        esac
    done

    # Check if the directory exists
    if [ ! -d "$directory" ]; then
        printf "Error: The directory '%s' does not exist.\n" "$directory"
        exit 1
    fi

    case $server_type in
        py)
            if command -v python3 >/dev/null 2>&1; then
                printf "Starting Python 3 http.server...\n"
                python3 -m http.server -d "$directory" -b "$address" "$port"
            else
                printf "Error: Python 3 is not installed. Please install Python 3 and try again.\n"
                exit 1
            fi
            ;;
        ph)
            if command -v php >/dev/null 2>&1; then
                printf "Starting PHP server...\n"
                php -S "${address}:${port}" -t "$directory"
            else
                printf "Error: PHP is not installed. Please install PHP and try again.\n"
                exit 1
            fi
            ;;
        js)
            if command -v node >/dev/null 2>&1; then
                if command -v http-server >/dev/null 2>&1; then
                    printf "Starting Node.js http-server...\n"
                    http-server "$directory" -a "$address" -p "$port"
                else
                    printf "Error: http-server is not installed. Please install http-server and try again.\n"
                    exit 1
                fi
            else
                printf "Error: Node.js is not installed. Please install Node.js and try again.\n"
                exit 1
            fi
            ;;
        *)
            printf "Error: Unsupported server type. Use -h for help.\n"
            exit 1
            ;;
    esac

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file and -l for URL.

uri() {

    local use_openssl=false

    help_option="
    Usage: uri [-l file_path]

    Create a Data URI or URL from a file.

    Options:
    -l   Use 'openssl' for base64 encoding (creates a URL).
    -h   Display this help message.

    Example:
    uri "./fichier.txt"
    uri -l "./fichier.txt"
    "

    while getopts ":lh" opt; do
        case "$opt" in
            l ) use_openssl=true ;;
            h )
                printf "%s\n" "$help_option"
                return
                ;;
            \? )
                printf "Error: Invalid option.\n"
                printf "Usage: uri [ -l file_path ]\n"
                return
                ;;
        esac
    done

    shift $((OPTIND - 1))

    if [ $# -eq 0 ]; then
        printf "Error: No file path provided.\n"
        printf "Usage: uri [ -l file_path ]\n"
        return
    fi

    local file_path="$1"

    if [ ! -f "$file_path" ]; then
        printf "Error: '%s' is not a file.\n" "$file_path"
        return
    fi

    local mime_type=$(file --brief --mime-type "$file_path")

    if [[ $mime_type == text/* ]]; then
        mime_type="$mime_type;charset=utf-8"
    fi

    local base64_data

    # Vérifier si openssl est disponible
    if command -v openssl &>/dev/null; then
        base64_data=$(openssl base64 -in "$file_path" | tr -d "\n")
    else
        printf "Error: 'openssl' command not found. Unable to create URL.\n"
        return
    fi

    # Vérifier si base64 est disponible
    if command -v base64 &>/dev/null; then
        base64_data=$(base64 -w 0 "$file_path")
    else
        printf "Error: 'base64' command not found. Unable to create Data URI.\n"
        return
    fi

    if $use_openssl; then
        printf "URL created from file '%s':\n" "$file_path"
    else
        printf "Data URI created from file '%s':\n" "$file_path"
    fi

    printf "data:%s;base64,%s\n" "$mime_type" "$base64_data"

}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory.

delete_files() {

    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.

sh() {

    #           ┌─ Enable colors for pipe.
    #           │  ("--color=auto" enables colors only
    #           │   if the output is in the terminal.)
    grep --color=always "$*" "$HISTFILE" \
        | less --no-init --raw-control-chars
          #    │         └─ Display ANSI color escape sequences in raw form.
          #    └─ Don't clear the screen after quitting less.

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Optimize PDF files.
#
# Usage examples:
#
#   optimize-pdfs path/to/some/directory path/to/some/file ...

optimize_pdfs() (

    # Check if the pdfcpu command-line tool is installed.

    if ! command -v "pdfcpu" &> /dev/null; then
        printf "\n%s\n\n" "pdfcpu command-line tool is not installed!"
        exit
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    get-file-size() (
        printf "%s" "$(wc -c < "$1")"
    )

    optimize-pdf() (
        filePath="$(dirname "${1%/}")"
        fileName="_$(printf "%s" "$(basename "$1")" | tr '[:upper:]' '[:lower:]')"

        optimizedFilePath="$filePath/$fileName"

        printf "* %s\n" "$1"

        pdfcpu optimize "$1" "$optimizedFilePath" &> /dev/null

        # If something went wrong (i.e. pdfcpu didn't create
        # the optimized file or exited with a non-zero status)
        # or the size of the optimized file is bigger than the
        # original file, keep the original file.

        if [ ! -f "$optimizedFilePath" ]; then
            return
        fi

        # shellcheck disable=SC2181
        if [ $? -ne 0 ] || \
           [ "$(get-file-size "$1")" -le "$(get-file-size "$optimizedFilePath")" ];
        then
            rm -rf "$optimizedFilePath"
            return
        fi

        # Otherwise, replace the original file with the optimized one.

        mv -f "$optimizedFilePath" "$1" 1> /dev/null
    )

    #                     ┌─ Default to the current directory.
    for filePath in "${@:-.}"; do
        if [ -d "$filePath" ]; then
            find "${filePath%/}" \
                -depth 1 \
                -name \*.pdf \
                -print \
                -type f \
            | while read -r file; do
                 optimize-pdf "$file"
              done
        elif [ -f "$filePath" ]; then
             optimize-pdf "$filePath"
        fi
    done

)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Rename media files.
#
# Rename the specified files so the filename is the file created date
# in the following format:
#
#    <year>-<month>-<day> <hour>.<minute>.<second>
#
# Usage examples:
#
#   rename-media-files path/to/some/directory path/to/some/file ...

rename_media_files() (

    rename_file() (

        filePath="$(dirname "${1%/}")"
        fileName="$(printf "%s" "$(basename "$1")" | tr '[:upper:]' '[:lower:]')"
        fileExtension="${fileName##*.}"

        # iOS
        #
        #   * IMG_1234.PNG => 2020-05-05 05.05.05.png

        if [[ "$fileName" =~ ^img_[0-9]+ ]]; then
           mv -f "$1" "$filePath/$(stat -f %SB -t "%Y-%m-%d %H.%M.%S" "$1").$fileExtension"
           return
        fi

        # Other
        #
        # Files that already contain the created date in the filename,
        # but not in the intended format.
        #
        #   * 20200505_050505.dng => 2020-05-05 05.05.05.dng
        #   * Screenshot 2020-01-02 at 03.04.05.png => 2020-01-02 03-04-05.jpg
        #   * Screenshot_20201010-101010_Something.jpg => 2020-10-10 10-10-10.jpg
        #   * signal-2020-05-06-07-08-09-123.mp4 => 2020-05-06 07-08-09.mp4

        newFileName="$(printf "%s" "$fileName" | sed 's/[^0-9]*\([0-9]\{4\}\)[_-]\{0,1\}\([0-9]\{2\}\)[_-]\{0,1\}\([0-9]\{2\}\)[_-]\{0,1\}\( at \)\{0,1\}\([0-9]\{2\}\)[_.-]\{0,1\}\([0-9]\{2\}\)[_.-]\{0,1\}\([0-9]\{2\}\).*\(\..*\)$/\1-\2-\3 \5.\6.\7\8/')"

        if [ "$newFileName" != "$fileName" ]; then
            mv -f "$1" "$filePath/$newFileName"
        fi
    )

    #                     ┌─ Default to the current directory.
    for filePath in "${@:-.}"; do
        if [ -d "$filePath" ]; then
            find "${filePath%/}" \
                -type f \
                -depth 1 \
                -print \
            | while read -r file; do
                rename_file "$file"
              done
        elif [ -f "$filePath" ]; then
            rename_file "$filePath"
        fi
    done

)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# The shebang function recursively adds or replaces the shebang in files
# within a specified directory, providing options to specify the shebang,
# target directory, and exclude certain files from the update.

shebang() {

    local directory="./"
    local shebang="#\!/usr/bin/env zsh"
    local exclude_files=()
    local recursive=false

    help_option="
    Usage: shebang [ -s shebang ] [ -d directory ] [ -e exclude_files ] [ -r ] [ -h ]
        
    The shebang function recursively adds or replaces the shebang in files
    within a specified directory, providing options to specify the shebang,
    target directory, and exclude certain files from the update.
    
    Options:
    -s   Shebang (default: #\!/usr/bin/env zsh)
    -d   Directory path (default: ./)
    -e   Exclude files
    -r   Recursively process subdirectories
    -h   Display this help message
    
    Example:
    shebang -s "#\!/usr/bin/env bash" -d "~/src/shell" -e "file1.txt, file2.sh" -r
    "

    while getopts "hrd:s:e:" opt; do
        case $opt in
            h)
                printf "%s\n" "$help_option"
                ;;
            r)
                recursive=true
                ;;
            d)
                directory="$OPTARG"
                ;;
            s)
                shebang="$OPTARG"
                ;;
            e)
                IFS=', ' read -ra exclude_files <<< "$OPTARG"
                ;;
            \?)
                printf "Invalid option: -%s\n" "$OPTARG" >&2
                exit 1
                ;;
        esac
    done

    if [ -z "$directory" ] || [ -z "$shebang" ]; then
        printf "Error: Missing required options. Use -h for help.\n"
        exit 1
    fi

    if [ "$recursive" = true ]; then
        add_shebang_recursive "$directory" "$shebang" "${exclude_files[@]}"
    else
        add_shebang "$directory" "$shebang" "${exclude_files[@]}"
    fi

}

add_shebang() {

    local directory="$1"
    local shebang="$2"
    local exclude_files=("${@:3}")

    for file in "$directory"/*; do
        if [ -f "$file" ]; then
            # Check if the file is excluded
            if [[ " ${exclude_files[@]} " =~ " $(basename "$file") " ]]; then
                printf "Excluding file: %s\n" "$file"
            else
                # Remove existing shebang if present
                sed -i '/^#!/d' "$file"
                # Add the new shebang at the beginning of the file
                sed -i "1s|^.*$|%s\n" "$shebang" "$file"
            fi
        fi
    done

}

add_shebang_recursive() {

    local directory="$1"
    local shebang="$2"
    local exclude_files=("${@:3}")

    for file in "$directory"/*; do
        if [ -f "$file" ]; then
            # Check if the file is excluded
            if [[ " ${exclude_files[@]} " =~ " $(basename "$file") " ]]; then
                printf "Excluding file: %s\n" "$file"
            else
                # Remove existing shebang if present
                sed -i '/^#!/d' "$file"
                # Add the new shebang at the beginning of the file
                sed -i "1s|^.*$|%s\n" "$shebang" "$file"
            fi
        elif [ -d "$file" ]; then
            # If it's a directory, recursively call the function
            add_shebang_recursive "$file" "$shebang" "${exclude_files[@]}"
        fi
    done

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Resize image.
#
# Create a new image based on the specified image resized by the
# specified amount.
#
# $1: Path to the original image.
# $2: Resize value (default is 50%).
#     See also: https://imagemagick.org/script/command-line-processing.php#geometry
#
# Usage examples:
#
#   * resize-image ./path/to/image.jpg 30%
#   * resize-image ./path/to/image.jpg 1000x1000!

resize_image() {

    # Check if ImageMagick's convert command-line tool is installed.

    if ! command -v "convert" &> /dev/null; then
        printf "ImageMagick's 'convert' command-line tool is not installed!"
        exit
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    declare path="$(dirname "$1")"
    declare fileName="$(basename "$1")"
    declare geometry="${2:-50%}"

    convert "$1" \
        -colorspace RGB \
        +sigmoidal-contrast 11.6933 \
        -define filter:filter=Sinc \
        -define filter:window=Jinc \
        -define filter:lobes=3 \
        -sigmoidal-contrast 11.6933 \
        -colorspace sRGB \
        -background transparent \
        -gravity center \
        -resize "$geometry" \
        +append \
        "$path/_$fileName" \
    && printf "* %s (%s)\n" \
            "$path/_$fileName" \
            "$geometry"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text within the current directory.

s() {
    grep --color=always "$*" \
         --exclude-dir=".git" \
         --exclude-dir="node_modules" \
         --ignore-case \
         --recursive \
         . \
        | less --no-init --raw-control-chars
          #    │         └─ Display ANSI color escape sequences in raw form.
          #    └─ Don't clear the screen after quitting less.
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cd() {

  builtin cd "$@" && ls;

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create a new directory and enter it

mkd() {

  mkdir "$@";
  cd "$@" || exit

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# -p : create intermediate directories
# -v : list created directories

mkdp() {

  mkdir -pv "$@";
  cd "$@" || exit

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location

v() {

	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
    
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.

tree() {

	tree -aC \
        -I '.git|node_modules|bower_components' \
        --dirsfirst "$@" \
        | less -FRNX;

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Determine size of a file or total size of a directory

fs() {

	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

addpath() {

    printf "Adding \"%s\" to PATH\n" "$1"
    export PATH="${1}:$PATH"
    
}



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Run a script in the background

rbs() {

  (nohup "$@" &>/dev/null &)

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`

json() {

	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;

	fi;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# UTF-8-encode a string of Unicode symbols

escape() {

    printf "\\x$(printf "%s" "$@" | xxd -p -c1 -u)"
    
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        printf "\n" # newline
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Find port

fport () {

  lsof -i tcp:$@

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Find and kill port

kport() {

  kill -9 $(lsof -i :$@ | awk 'NR == 2 {print $2}')

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Find pid

fpid () {

  pidof $@

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Find and kill pid

kpid () {

  pidof -k $@

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

display_info() {

  # Run the command and store the output in a variable
  display_info=$(system_profiler SPDisplaysDataType)

  # Use awk to extract the information
  echo "$display_info" | awk '/Resolution:/{print $0}'

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Downloads a .mp3 file

dlmp3 () {

  youtube-dl --extract-audio --audio-format mp3 $1

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dlmp4 () {

  youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' $1

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

find_symlinks(){ 

    ls -lR "${@}" | grep ^
 
 }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Load OS specific configs.

. "$OS/functions"
